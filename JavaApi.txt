 -  List<Integer> list = new ArrayList<>();
            list.add(100);  // tự động được auto boxing về Integer.
            líst.remove(100) // List luôn có PT remove(int index) và remove(Integer object) =>
             nếu truyền int mà ko phải Integer => ăn vào remove at index => run throw IndexOutOfBoundEx
             Lưu ý khi  list.remove('O'); => vẫn là đang remove at index do 'O' của char được chuyển auto sang int
 - Khi sử dụng object.equal()  thì 2 object phải cùng loại nhau. nếu ko mặc định là false.
 - Không thể vừa lặp vừa xóa phần tử với cùng 1 reference of list, muốn xóa trong khi lặp phải dùng iterator, nó sẽ cập nhật size của list khi chúng ta gọi xóa
 - Khi dùng api ArrayList.clone(); thi sẽ trả ra 1 Líst nhưng các phần tử  của list vẫn tham chiếu tới các phần tử ở list gốc. nếu hay đổi data của phần tử list nào thì list khác cũng bị thay đổi, nếu chỉ remove phần tử ở list nào thì list khác ko đổi.
 - list.remove(Object) return boolean, vi la object nen co the la bat ky gi
 - Líst.remove(index) return Object, so can not put it in IF
 List<Integer> list = new ArrayList<>();
          list.add(110);
          list.add(new Integer(110));
          list.add(110); // vì nằm trong khoảng -128-127 nên sẽ lấy trong memory giá trị này đã lưu trước
          list.removeIf(i -> i == 110);  // i là wrapper typeVì 1 vế là 110 nên java sẽ extract int value of wrapper element để so sánh chứ ko phải so sánh với new Integer(110) nên tất cả các pt matched
foreach: dryFruits.remove(dryFruit);  //Lỗi ConcurrentModificationException, Để vừa lặp vừa xóa, có thể dùng for(i = list.size(),i --)  hoặc lặp như bình thường, nhưng đến lúc xóa phải giảm i--
UnaryOperator unaryOperator = b -> String.valueOf(b);
list.replaceAll(unaryOperator); // thay thế tấy cả các phần tử trong mảng thành 1 gias tri moi, cuxng kieu vs kieu cu
 List<Integer> list = new ArrayList<>();
        byte b = 10;
        long b1 = 10;
        int t =10;
        list.add(b); //Error
        list.add(b1); //Error
        list.add(t); // ok
// Khai kiểu gi phải add đúng kiểu đó, nếu khai wrapper thì chấp nhận wrapper và primitice  , tương tự với định ghĩa param trong function

 - LocalDate date = LocalDate.of(2020, 9, 31);   Tháng 9 chỉ có 30 ngày, compile ok, run throw Ex
 -  Period period = Period.of(0, 0, 0); sẽ in ra: P0D, nếu nhập đủ ngày tháng năm sẽ in ra: PnYtMnD, khi
 Period period = Period.parse("p-30000y");   Giam di 30000 nam
 - LocalDate.atDate(xxx).atYear(-10000) thì in ra year có thể là âm ok. ko văng Ex
 - LocalDate/Time using parse() or of() always create new object, so compare then return false.
 - LocalDate.parse("2018-1-01");  => throw ex, luôn mặc định là yyyy-MM-dd, nếu muốn parse custom thì  phải LocalDate.parse("2018-1-01", customDateTimeFormatter);
 -  LocalDate obj = new LocalDate(2020, 2, 14); // compile eror , no constructor
 LocalDate date1 = LocalDate.parse("1947-08-15", DateTimeFormatter.ISO_DATE);
         LocalDate date2 = LocalDate.parse("1947-08-15",
                 DateTimeFormatter.ISO_LOCAL_DATE);
         LocalDate date3 = LocalDate.of(1947, 8, 15);
         System.out.println(date1.equals(date2)); // cả 3 in ra giống nhau, so sánh  = true
         System.out.println(date2.isEqual(date3)); // so sánh  = true
date.getMonth() => in hoa: MARCH
LocalTime obj = LocalTime.now();
        System.out.println(obj.getHour());// Tinh voi local time => 24h
Period period = Period.of(0, 1000, 0);  => P1000M
Period period = Period.of(0, 0, 0);  => P0D
Period period = Period.of(1, 0, 0);  => P1Y
DateTimeFometter o trong package: java.time.format

 - Khi dùng StringBuilder.tóString() thì sẽ trả ra 1 string với constructor: new String() nên luôn là 1 string mới, có địa chỉ mới.
 - StringBuilder không thể append null là tham số. compiler erorr
 - Khi khai báo new StringBuilder(100);
 -> khai báo size initialed, khi get sb.length = 0, sb.tóString.length = 0
 - khi dùng;  kết hợp với localDate.at(LocalTime.MAX) -> in ra ngàyTgio.999999999,  nếu chỉ là localDate: yyyy-mm-dd, nếu chỉ là localTime: hh:mm:ss nếu khai ss trong constructor
 LocalTime.MIN = LocalTime.MIDNIGHT = 00:00, LocalTime.NOON = 12:00
 - Khi dùng date.minusYears(-5)  => năm + 5 năm


- String
final String fName = "James"; // do là final nên được resolve at compile time -> put to string pool
String lName = "Gosling";  // không là fin, nhưng là chuỗi hằng nên được đưa vào string pool, resolve at runtime
String name1 = fName + lName; // vì lName được resolve at runtime nên name1 không được đưa vào string pool, réolve at runtime, tạo ra 1 đối tượng mới.
String name2 = fName + "Gosling"; // fName là final, thêm chuỗi hằng => resolve at compileTime, đưa và string pool tên s1
String name3 = "James" + "Gosling"; // 2 chuỗi hằng -> resolve at compileTime, ktra trong string pool đã thấy có s1 có cùngGT, nên lấy dùng luôn
System.out.println(name1 == name2); // 1 runtime ko có trong string pool, 1 compileTime có ở string pool => false
System.out.println(name2 == name3); // cả 2 đều compiletime, đều refer by string pool -> trùng địa chỉ => true
 strings.add(1, ""); Nếu trước đó chưa add ele tại 0 thì throw IndexOutOfBounfEx
 final String s = "{";
 final int i = 3;
 final Integer tr = 4; // non-constant var, evaluate at runtime, create new Object at heap because not primative type neither string type

String fs = s + i; // compile time  evaluate, put in pool.
String ff = i + tr //  run-time evaluate
 System.out.println("String--------");
        String javaworld = "JavaWorld";
        String java = "Java";
        String world = "World";  // 3 object này được evalueate compile time, được đưa vào trong pool
        java += world; // phép cộng này từ các biến ko phải final, k phải string constant => runtime. tạo object ở heap mới là nó
        System.out.println(java == javaworld); // false do 1 ở trong pool, 1 ở heap, == là so sánh địa chỉ tham chiếu.
//        t.replace(string/char search, string/char replacement); sẽ replace tất cả các đoạn trùng khớp, muốn replace 1 đoạn đầu tiên thì dùng replace first
String text = null;
        text = text + text; //Line n1
        System.out.println(text);   // ok : nullnull
boolean flag1 = "Java" == "Java".replace('J', 'J'); //Line n1
        boolean flag2 = "Java" == "Java".replace("J", "J"); //Line n2
        System.out.println(flag1 + "dsf+ "+ flag2); // true / false
Khi usering char, nếu chuối ko đổi, java trả chuỗi gốc, khi using "" charsequence, java luên trả chuỗi mới trong heap


------- boolean:
 Boolean b = new Boolean(null/asjkd/false/FalSe); b is false, compile ok
 final boolean flag ;
         flag = false;
         while(flag) { // ok
             System.out.println("Good Morning!");
         }

 -------Double:
 private static void add(double d1, double d2) {
         System.out.println("double version: " + (d1 + d2));
     }

     private static void add(Double d1, Double d2) {
         System.out.println("Double version: " + (d1 + d2));
     }

     public static void main(String[] args) {
         add(1.8, new Double(10.0));
     }  ==> Error because both method matched
