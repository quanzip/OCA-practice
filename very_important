 interface sẽ extends interface
 abstract class sẽ implements interface (không được extends, và không cần implements abstract methods.)

 class Animal1 {
     static String name;
      int numLeg;

     public Animal1() {
         this(name, numLeg);    // errror vì numleg không phải static => trong this([args]) thì các args phải là static var/methods.
     }
    => Muốn sử dụng THIS(var, var1) với các biến, thì các biến đó phải là static

 boolean a1 = false;
        boolean b1= true;
        boolean c1 = a1 && (b1 = false); //  because a1 = false; so right hand value (b1 = false) is not cared anynore
        // so c get false as result
        System.out.println(c1);  // false;
        System.out.println("AND:" + a1 + "-" + b1); // false true


// Trong biểu thức này, vẫn áp dụng theo quy tắc bên trên, đằng sau toán tử đôi (+=) luôn được đặt trong ngoặc
        // và thực hiện trước. Tuy nhiên, biểu thức (l=3) sẽ gán giá trị cho l, nhưng tại chỗ gán đó l mới có giá trị mới,
        // những chỗ truóc đó l xuất hiện thì vẫn mang giá trị cũ như ban đầu gán.
        long l = 4;
        l += 2 * l + (l = 3) * 3; // 4 + ((2 * 4) + 3 * 3) = 21;
        System.out.println(l);

logic operation (&&, ||)  ###  bitwise operation (& | ^):
logic: break circuit when 1 side is nok while bitwise will run throughout business event 1 side is not ok
// new knowledge: XOR ~ ^: require only one side to be true => true; if both is false or both is true => false;
        // XOR là toán tử yêu cầu 1 trong 2 vế phải là true thì KQ trả ra sẽ là true, còn các Th khác sẽ là false;
        // vd 1 true 1 false -> true, 2 true -> false, 2 false -> fasle;
        boolean r = 1 > 2 ^ 2 > 1; //  false ^ true => true;
        boolean r1 = 1 < 2 ^ 2 < 3; // true ^ true  => false;
        boolean r2 = 1 > 2 ^ 2 > 3; // false ^ false => false;
        System.out.println("XOR: " + r + "-" + r1  + "-" + r2);

- Chỉ có thể đặt class là static nếu đó là 1 subclass (class conv được khai báo bên trong của class bất kỳ)
- Khi khởi tạo instance của 1 static class D là 1 class con của class X. ta chỉ cần X.D className = new X.D();
Nhưng nếu D là 1 normal class (non static): Thì cần khởi tạo Class X trước, sau đó dựa vào X để khởi tạo D: X x= new X; X.D className = x.new D();

/**
     * ok
     */
    public void EmptyClass() {
        System.out.println("This method has same name with class but it is not a constructor and still valid");
    }

 /*
        * Object luôn được khai báo và định giá trị tại run-time, kể cả khi chúng được khai báo final.
        primative type sẽ được định giá trị tại compile time nếu chúng được khai báo final.
        * */

 for (int m = 0; m++<10 ;){   =>> m sẽ so sánh với 10 xong rồi mới cộng thêm 1

 SIC, thứ tự chjay của các thành phần trong 1 class, 3 khối static, instance và constructor sẽ được tự động thực thi sau mỗi lần 1 object được khởi tạo
 riêng khối static chỉ được chạy 1 lần ở lần khai báo đầu tiên của class.

* while khác do-while ở chỗ:
* while chỉ lặp nếu biểu thức điều kiện ok
* Do-while sẽ thực thi ít nhất 1 lần, ở những lần lặp tiếp theo, sẽ phụ thuộc vào điều kiện ủa while trả ra, cần chú ý vị trí thay đổi điều kiện ex: do{}while(i++<10) thì i sẽ so sánh với 10 trước rồi mới cộng thêm 1
== Khi dùng label, có thể dùng cho 1 lệnh bất kỳ ex (OK:sout("quan")), nhưng không thể dùng break/continue cho cho các lệnh này, vì chúng không đại diện cho 1 loop.
điều kiện của if(false), do{}while(false) có thể để cứng là false, nhưng với while(false) và for(;false;) sẽ compile error.  for(;;) -> ok, nếu điều kiện xác định từ non-final var, thì vẫn sẽ ok vì JVM sẽ valuate at runtime

Mảng 1 chiều kiểu primative thực chất là 1 đối tượng nên chỉ có thể gán cho đối tượng object. Object c = new short[]{1} // ok
Mảng 1 chiều kiểu primative vì vậy không thể gán cho mảng object[]
Mảng 2 chiều kiểu primative là mảng 1 chiều, mỗi phần tử là 1 hàng nên có thể gán cho mảng 1 chiều object[]

với kiểu string và các kiểu custom khác thì mảng 1 chiều chính là mảng object, Object []o = new String[]{};  //ok

----- Stack - heap - gc
 System.gc(); // suggest JVm to reclaim memory
Kind kind = new Kind("data");
// in stack  // data of kind is saved in heap
kiểu primitive và reference của object sẽ được lưu ở stack (high speed), data của object sẽ được lưu ở heap

-------------- enum
Enum
Enum có thể sử dụng == or equals() để so sánh
Không thể kế thừa bất kỳ thứ gì(interface, class, abstract class), có thể có constructor,  fields, METHODS.
Constructor sẽ ngầm định là private, không được chuyển sang public | protected. do vậy chỉ có thẻ gọi constructor của nó bên trong chính nó. Cũng do đó không thể kế thừa enum, không thể khai báo enum với từ khóa new.
Các giá trị của enum đưuọc đánh thứ tự, bắt đầu từ 0 ^, Enum là type kế thừa java enum. KHÔNG PHẢI KIỂU PRIVATIVE nên không thể so sánh giá trị với int ie if(enumVar == 4) // error

Vào lần sử dụng đầu tiên của bất kỳ enum reference nào. tất cả các thành phần đều sẽ được khởi tạo theo trong lần đó, kể từ đó về sau, nếu các enum khác được gọi, JVm sẽ chỉ cần return các enum đã được khởi tạo đó => JVm chỉ khởi tạo các enum duy nhất 1 lần,
Trong enum có các method, các method là chung cho tất cả các reference, được sử dụng bởi các instance.  Nếu bất kỳ thành viên của enum muốn có riêng thêm hoặc overide lại method chung, thì khai báo trong body riêng của chúng. Nhớ phải có ; ở cuối {};
Instance của enum có thể gọi các method chúng. không thể gọi các method riêng bởi vì khi khai báo là EnumType name = EnumType.Xvalue nên instance này chỉ gọi được các method chung.
Nếu enum khai báo phương thức trừu tượng (có từ khác abstract) thì tất cả các thành viên phải overide lại method này