Package statement luôn đứng đầu, sau mới đến import statement

a class can not be sub-classed có nghĩa là 1 class không thể bị kế thừa

thuộc tính private thì chỉ có thể sd ở bên trong class chứ không phải bên trong file

trong 1 class, instance var là các biến ko phải static, class variable là các biến static

Class Exception la checked Ex, Nên khi throw new Exception thì phải try-catch, try-catch nếu có finally  thì bên trong try-catch có văng ra new Exception cũng ko cần bắt vì nó còn đi vào finally, nếu finally văng thì phải khai báo try-catch hoặc khai báo trên method signature

//  vì finally luôn được chạy nên:  nếu trong try có return nhưng finaly không có return thì return vẫn chạy nhưng trả kết quả là từ return của try
            // Nếu try/catch/finally đều có return thì method sẽ lấy giá trị return của finally

QuANTRONG
khi mà class chỉ có các kiểu primative hoặc các kiểu wrapper của chúng thì sẽ không có các import cụ thể, JVM tự import các import sau: 1.Java lang,2.The package with no name.
=> tất cả các đối tượng mà từ pkg java.lang và các package noName thì sẽ không cần import tường minh, jvm tự động import khi biên dịch

  int []i = {1,2,2}; i.getClass().isArray() => true; cũng đúng với các kiểu khác như Object...

Nếu chỉ rõ khai báo 1 object từ đâu bắt đàu bằng package name gốc thì ko cần import: util.log4j.Logger log = new util.log4j.Logger() => ko cần import gì cả
 Nếu có 2 class trong cùng 1 pkg thì 1 trong 2 class gọi nhau sẽ ko cần import, ok,
* Nếu chúng ở khác pkg thì khi gọi nhau phải có import cự thể.
* Nếu dùng import white card pkg K trong class C để gọi class B, nhưng trong cùng package với C cũng có 1 class tên B khác, thì nó sẽ là ref của B trong cùng pkg với C (k ưu tiên white card)


Khai báo biến:
final int c = 10; biến constant, được biên dịch gán gái trị ngay khi viết codetime: compile-time
final int d; NOT initialied khi compile-
d = 10; initialied at run-time
=====> tất các biến được khai báo và khởi tạo không có final thì chúng sẽ được solve lúc chạy chương trình (run time)
------ còn các biến có final thì chúng sẽ được solve at compile time,

---------------------------------- LOOP
* while khác do-while ở chỗ:
* while chỉ lặp nếu biểu thức điều kiện ok
* Do-while sẽ thực thi ít nhất 1 lần, ở những lần lặp tiếp theo, sẽ phụ thuộc vào điều kiện ủa while trả ra, cần chú ý vị trí thay đổi điều kiện ex: do{}while(i++<10) thì i sẽ so sánh với 10 trước rồi mới cộng thêm 1
== Khi dùng label, có thể dùng cho 1 lệnh bất kỳ ex (OK:sout("quan")), nhưng không thể dùng break/continue cho cho các lệnh này, vì chúng không đại diện cho 1 loop.
điều kiện của if(false), do{}while(false) có thể để cứng là false, nhưng với while(false) và for(;false;) sẽ compile error.

------- CLASS NAME
1 File can not have more than one public class, that public class is the file's name
class Animal1 {
    static String name;
     int numLeg;

    public Animal1() {
        this(name, numLeg);    // errror vì numleg không phải static => trong this([args]) thì các args phải là static var/methods.
    }

----------- String
  * String buffer is thread-safe, its method are synconized.
    * // size khởi tạo của 1 String buffer là 16, nếu length vượt quá, nó sẽ tăng lần dần dần với 16
    * */
String dd = "quan";
        String ff = "qua";
        ff = ff+ "n";
        System.out.println(dd == ff); // false

-----------METHOD:
Method signature is method name and the order of parameters, DO NOT contain return type, param name, access modifier.  không tthể trùng signature, error
1 class/interface chỉ có 2 loại modifier lúc khai báo là public và package, muốn extends ở mọi nơi thì để public, nếu để package thì chỉ được extends từ các thành phần trong cùng package
Quy tắc này áp dụng giống như constructor/method/variable, nếu muốn sử dụng ở package nơi khác, cần để public

------------GABAGE COLLECTION
-GC - Gabage collection sẽ thu dọn rác khi 1 block được chạy xong,
những thành phần bên trong block không được ràng buộc / không trong phạm vi chạy của scope nữa sẽ bị thu dọn/xóa
Nếu 1 biến được khai báo sau đó sử dụng, sau đó được gán lại về null, thì tại dòng null đó, biến đó là đủ điều kiện để GC thu dọn

------------ CLASS INITIALIZATION
- khi class được khai báo với từ khóa new, các biến bên trong class được xóa và gán lại với giá trị mặc định
Nếu chúng không được gán sẵn: int = 0, double/fload = 0.0, String, reference/INteger = null, boolean = false;

------------ STATIC
- Các biến static bên trong 1 class sẽ được khỏi tạo khi mà chương trình chạy, mà không cần đợi tới lúc Object được
khởi tạo, để chúng có thể được sử dụng ở bất kỳ đâu thông qua Class Variable (tên class) còn các biến/hàm khác thì phải
đợi khi class được khởi tạo (using new) thì chúng mới được load
Trong ngữ cảnh static, chỉ có thể sử dụng các biến/phương thức static, không thể gọi, sử dụng biến, phương thức thường.
 * Ngược lại, trong ngữ cảnh thường, có thể gọi , sử dụng mọi loại biến, phương thức: thường và static

------------ INI ORDER
- bên trong 1 class, có thể có khối static block, khối block thường (non static) và constructor, thứ tự thực thi của chúng như sau:
 Static - instance (block t) - constructor: SIC
 =====> Bên trong 1 class, những thành phần static luôn được khởi tạo và chạy trước, kể cả khi thứ tự ở dưới các dòng khác
 . sau đó mới đến các Tp khác
 Nhưng nếu 1 class có khối static đó được khởi tạo nhiều lần, thì khối static đó chỉ chạy ở lần đầu, những lần sau chỉ có khối instance được chạy lại tự động

------------ METHOD CALL
- Java sử dụng cơ chế call-by-value khi 1 method được gọi, hay gọi là, tạo 1 bản copy của các tham số mà method yêu cầu
+ nếu truyền biến  nguyên thủy vào cho method, thì method không thể thay đổi gias trị của biếnkiểu vì chỉ là 1 copy
+ nếu chuyển loại Object (rêference) thì method có thể thay đổi do 2 Object (object được copy để truyền vào và object gốc)
cùng trỏ tới 1 object (vùng nhớ)

--------------OVERLOADING != OVERRIDING
Overloading: ghi de: co nhieu cac method cung ten trong cung 1 class, chung co thu tu Param khac nhau, kieu khac nhau
Overrride: dinhn ghia lai cac method cua cha, chung co cxung ten, cung param
 => de override,  + pt override o class con can co cung ten/param,
    + kh dc throw khac kieu cha, cung k dc throw kieu lon hon cha, (cos the ko throw gi, hoac throw runtimeEx, hoac throw kieu <= cha)
    + kieu tra ve can phai giong hoac la nho hon kieu cua cha

----------------PACKAGE
Logical group of similar types of classes into a namespace are call packages.
- wild card is using * when import package to class file.  ex: import java.util.*

// =>>>> Đối với kiểu PRIMITIVE, không thể được sử dụng trong mọi ngữ cảnh: tính toán, In ra NẾU chưa được gán giá trị


-------------- INTERFACE
Các thuộc tính trong interface luôn là public & final -> không thể thay đổi giá trị của chúng
Abstract sẽ implements interface, cÓ THỂ HOẶC KHÔNG CẦN IMPLEMENTS bất kỳ phương thức trừu tượng nào vì abs class mặc định chứa các pt trừu tượng => nó sẽ chứa thêm các pt tt của interface
Abstract class không thể được khai báo, nếu cố tình khai báo, phải định nghĩa toàn bộ các pt tt (phương thức trừu tượng)
Khi 2 interface đều có 1 phương thức default giống nhau. 1 class K kế thừa 2 interface đó (xẩy ra đa kế thừa, java k cho phép),
=> K se phai ke thua lai (dinh nghia lai) PT default nay cua cha / hoac 1 trong 2 cha phai doi method signature
=> K phải override lại phương thức trên để khi gọi tới phương thức đó, jvm biết đang gọi từ trong K, Nếu muốn gọi của cha, thì ParentName.super.methodName().
Có thể sửa được gái trị của thuộc tính trong abstract class, chúng không phải final

-Khi muốn gọi phương thức default của interface từ BÊN TRONG class con của chúng, thì cần gọi theo: [Tên interface].super.[methodName], dùng khi class con cũng có phương thức có signature giống với phương thức default của cha
vd: từ bên trong 1 phương thức bất kỳ của class con đang kế thừa interface Animal, Animal.super.run(); và chỉ có thể
gọi như vậy nếu Animal là cha trực tiêp, không thể gọi nếu Animal là ông nội hoặc cao hơn.
+Bên ngoài class con kế thừa interface Animal, khong thể gọi như này, mà phải khai báo instance của class con và gọi tới phương thức run() đó

Top class (class ngoài cùng - trùng với fileName) không không được là static. Chỉ dùng static cho class con.

interface T1{
}
interface T2{
   int VALUE = 10;
   void m1();
}

interface T3 extends T1, T2{
   public void m1();
   public void m1(int x);
}

T2 và T3 cùng có 1 phương thức m1() => ok, code này chạy fined



-------------- INHERIT
Khi X kế thừa Y chứa 1 thuộc tính protected, thuộc tính đó sẽ trở thành private bên trong X (chỉ được sử dụng bên trong X)
// Khi kế thừa. chỉ cần gọi 1 trong các phương thức khởi tạo của cha, nếu cha khai báo cụ thể. Nếu cha không khai cụ thể cons nào, thì không cần, JVm tự làm cho

--------------- LOOP
* while khác do-while ở chỗ:
* while chỉ lặp nếu biểu thức điều kiện ok
* Do-while sẽ thực thi ít nhất 1 lần, ở những lần lặp tiếp theo, sẽ phụ thuộc vào điều kiện ủa while trả ra, cần chú ý vị trí thay đổi điều kiện ex: do{}while(i++<10) thì i sẽ so sánh với 10 trước rồi mới cộng thêm 1
== Khi dùng label, có thể dùng cho 1 STATEMENT ex (OK:sout("quan")), nhưng không thể dùng break/continue cho cho các lệnh này, vì chúng không đại diện cho 1 loop.
điều kiện của if(false), do{}while(false) có thể để cứng là false, nhưng với while(false) và for(;false;) sẽ compile error..  for(;;) -> ok
*  Nếu đưa vào while 1 nếu condition bởi tất cả là các constant (using final) ẽx while (f > 0 || g < 0) f & g đều được khai báo dùng final
*  thì while sẽ định giá trị luôn (resolve value at compile time due to using final) => nếu là false, thì sẽ báo lỗi biên dịch luôn, tương tự với for
*  Nhưng nếu có 1 trong các tham số trong while không phải final, thì compile không lỗi do JVm sẽ chỉ định gía trị được ở run time
*
* - nếu dùng label bởi các lệnh break, continue,... thì {} của lable phải là cha của nơi dùng lệnh, như ví dụ bên dưới,
 public static void main(String[] args) {
        ZIP: for(;getCond();) {
             final boolean f = false;
              boolean g = false;
            while (!f || g) {   // ok because g is not final, but if g is final then compile eror due to valuate at run time
                if (Math.random() > 0.34) break ZIP;
            }
            System.out.println("quan");
        }
        int c  = 0;
        while(c > 0) {
           //  if (c == 0) break ZIP;  // error because {} of lable ZIP are not parent of this block, so ZIP is not found
            System.out.println("asd");
        }
    }

-------------------- mảng
- mảng luôn được lưu trữ tại heap, kể cả mảng của các kiểu nguyên thủy hay kiểu object
     int a1[] = new int[]{1};
            Object o2 = a1;
          //  Object o3[] = a1;  // eror vì mảng 1 chiều của primitive thực chất chỉ là 1 đối tượng, không thể gán cho 1 mảng đối tượngthể
            //  , chỉ có mảng 2 chiều mới có thể gán cho mảng 1 chiều object vì nó thực chất là mảng 1 chiều.
    //        Object[] o4 = new int[2]; // error vì new int[2] chỉ là 1 đối tượng, không thể gán cho 1 mảng đối tượng.
            ((int[])(o2))[0] = 10;
 Khi đếm các đối tượng đã được tạo ra là bao nhiêu, phải đếm tất cả các dối tượng có , bất kể đã gán null hay chưa.
  * Khi khai báo Integer x[]= {1,2,3} hoặc dùng phương thức valueof(X) thì X sẽ được kiểm tra trong cache có chưa, có rồi thì dùng, chưa có thì thêm vào cache thay cho phương thức new Integer(X).
  vd Integer X[] = {1,2,3,4}
  *  Integer Y[] = {1,2,3,4}
  *  thì có 6 đối tượng được tạo ra, có các phần tử trong Y đều đã được cahe và dùng lại
  *   => X[0] == Y[0]   =>  true.

----------------switch
 // Các giá trị trong case phải trong khoảng giá trị cho phép của kiểu truyền vào trong switch - phải được xác định ngay lúc compile(khi viết mã)
        // default case có thể đặt tại bát cứ đâu.
        // Nếu không sử dụng break ở mỗi case, thì khi switch chạy, case X có giá trị thỏa mãn, thì tất cả các logic
        // từ X trở xuống, bao gồm logic của các case khác cũng được xử lý mặc dù giá trị của case là không khớp
        // và bao gồm cả logic của DEFAULT nếu default để phía dưới case đó. Sẽ chạy đến khi nào gặp
        //
        // ex
        // Trong ví dụ dưới. các case không có break, case: 1 không thỏa mãn, logic của nó không được chạy
        // và case 2: sẽ thỏa mãn, thì logic của nó và logic của case 0 sẽ được thực thi do case 2 không có break
        // DEFAULT không được thực thi do default được đặt trên đầu, nếu nó dược đặt dưới case 2, nó cũng sẽ được thực thibreak cho đến khi gặp b


=-------------- enum
Enum
Enum có thể sử dụng == or equals() để so sánh
Không thể kế thừa bất kỳ thứ gì(interface, class, abstract class), có thể có constructor,  fields, METHODS.
Constructor sẽ ngầm định là private, không được chuyển sang public | protected. do vậy chỉ có thẻ gọi constructor của nó bên trong chính nó. Cũng do đó không thể kế thừa enum, không thể khai báo enum với từ khóa new.
Các giá trị của enum đưuọc đánh thứ tự, bắt đầu từ 0 ^, Enum là type kế thừa java enum. KHÔNG PHẢI KIỂU PRIVATIVE nên không thể so sánh giá trị với int ie if(enumVar == 4) // error

Vào lần sử dụng đầu tiên của bất kỳ enum reference nào. tất cả các thành phần đều sẽ được khởi tạo theo trong lần đó, kể từ đó về sau, nếu các enum khác được gọi, JVm sẽ chỉ cần return các enum đã được khởi tạo đó => JVm chỉ khởi tạo các enum duy nhất 1 lần,
Trong enum có các method, các method là chung cho tất cả các reference, được sử dụng bởi các instance.  Nếu bất kỳ thành viên của enum muốn có riêng thêm hoặc overide lại method chung, thì khai báo trong body riêng của chúng. Nhớ phải có ; ở cuối {};
Instance của enum có thể gọi các method chúng. không thể gọi các method riêng bởi vì khi khai báo là EnumType name = EnumType.Xvalue nên instance này chỉ gọi được các method chung.
Nếu enum khai báo phương thức trừu tượng (có từ khác abstract) thì tất cả các thành viên phải overide lại method này

----- Stack - heap - gc
 System.gc(); // suggest JVm to reclaim memory
Kind kind = new Kind("data");
// in stack  // data of kind is saved in heap
kiểu primitive và reference của object sẽ được lưu ở stack (high speed), data của object sẽ được lưu ở heap

---------  Exception
Trong catch (AException | BException e)  chỉ có thể dùng như này nếu AException và BException đều là CON của CHECKED exception đang được chủ động throw ra vd: IOException,... khi mở file
Try-with-resource: luôn có 1 finally {} ngầm định được chạy trước các catch{} hay finally {} tường minh, không bắt buộc có catch/finally tường minh vì try-with-resource đã luôn có finally {} ngầm định
Thứ tự close các resource trong try là từ dưới lên trên, khai báo sau sẽ được close trước.
nếu Nếu trong try-with-resource throw Ex, thì nó sẽ trở thành main exception và được xu lý bằng Ex của catch(Exception mainEx) {} còn các exception mà bị văng ra từ finally {} ngầm định sẽ được nén vào trong 1 array, lấy ra từ mainException.getSuppressed();
- 1 khối try catch, các khối catch sẽ được khai ex tùy ý nếu chúng là runtimeEx theo chiều tăng dần phạm vi (con -> cha)
Chỉ được khai catch là checked EX nếu phương thức trong try{} văng ra ex đó.
Phương thức con kế thừa cha có ex thì con sẽ ok nếu: không khai ex, khai ex cùng cây với cha và <= Ex cha, khai bất kỳ runtime ex

Kế Thừa:
Nếu A kế thừa B, B định nghĩa cons tường minh CÓ THAM SỐ,  thì A cũng phải override (gọi) phương thức này trong cons của A
=> Tất cả class kế thừa B đều phải khai cons và gọi tới cons có tham số của B
=> Nếu B không khai bất kỳ cons nào thì các con có thể khai hoặc không.
=> Nếu B khai Cons không tham số thì các con có thể khai hoặc không
=> Nếu B khai Cons có tham số thì các con bắt buộc phải khai cons và gọi cons của B (chỉ cần 1 trong các cons của B, nếu B có nhiều)

Interface
Nếu khai báo phương thức static S và method Default D
- Static method của interface chỉ có thể gọi qua reference (interfaceName.staticMethod), không thể gọi qua interface instance, còn static của class và abs class có thể được gọi qua reference hoặc instance.
- Default method có thể gọi qua instace, không thể gọi qua instace,  class triển khai insterface phải khai báo instace để gọi các default method này
=> Static method và default method của interface có quy tắc truy cập ngược nhau.
=> Khi A kế thừa abs class B và interface C, B và C đều khai phương thức static S,
a.S là gọi S của B vì static method S của Class và abs class mới có thể gọi qua instance,  Static method của interface C chỉ cso thể được gọi qua referenceName

d instanceof C
Nếu C không phải là cha hay ông nội (tính cả extends hay kế thừa) thì compile sẽ lỗi luôn, không biên dịch.
Tương tự với ép kiểu, nếu không trong cây kế thừa sẽ lỗi luôn compile, còn trong cây rồi thì có thể compile nhưng runtime vẫn có thể lỗi do không thể casst


RETURNTYPE => double, vì long < double của d nên  giá trị chung trả ra sẽ là kiểu double
public RETURNTYPE methodX( byte by){
    double d = 10.0;
    return (long) by/d*3;
}
// Khi cast (long) thì chỉ là cast cho vế đầu , tương đương với ((long) by/d* 3)


package com.oca.TEST_TEST_TEST_TEST_TEST_TEST.test1603;

public class Sentance9 {

    private final double r;
    // khi đã khai thuộc tính final thì phải gán giá trị ngay hoặc
    // phải gán trong constructor hoặc trong static block
    double rr;
    static {
//        r = 1;  only if r la static
    }

    Sentance9() {
        r = 1;
    }

    public void setShort(short ddd) {  // short
        rr = ddd;
    }
    public void setRR(long ddd) {   // long
        rr = ddd;
    }

    public static void main(String[] args) {
        Sentance9 e = new Sentance9();
        e.setRR(90);  // ok auto cast  to Long, vi 90 se tu hieu la Int, ma int < long la tham so cua ham => OK

        e.setShort((short)90); // error vi 90 la int, co the vuot qua range kieu short cua ham
        // nen phai cast ve short
    }
}


public static void changeString(String s, StringBuilder sb, ObjectR r, int[] is) {
        s = null;
        sb.append("quan");
        sb = null;
//        sb = sb.append("s");
        r.name = "Asd";
        r = null;

        is[0] = 1;
        is[2] = 3;
        is = null;
}
// phuong thuc tren co casc tham so duoc gasn bang null o cuoi, chung deu ko the anh huong den object, sau khi goi phuong thuc tren
// casc object goc van co gia tri nhu binh thuong, ko bi null di da bi gan null,  casc data dc thay doi trong method deu dc ghi lai

// java dung co che callByValue de goi ham: truyen vao 1 ban copy X cua cac object goc G de thuc thi tren do, neu thay doi thuoc tinh thi ca 2 se bi thay doi
// , nhung neu ben trong ham ma object bi gan sang 1 doi tuong khac K, thi X se tro sang 1 vung nho khac, G van la G, luc nay rieng biet han vs X, khong bi gan sang K
// truoc khi gan sang K, neu X thay doi gia tri thuoc tinh thi ca X va G deu dc thay doi nhu nhau do van con tro chung vao 1 vung nho data

* .
*
--------- String
Đối với string , mọi string đều được intern (đưa vào trong pool), và có thể dùng để + giá trịkhác string khác khi chúng đang bị null, lúc nào giá trị sẽ kèm thêm chuỗi null
vd string s = null;   s+="quan"  =>   "nullquan"  mà không có exception. với các kiểu khác, sẽ bị null, ngay cả với kiểu Integer, Float hay Long, khi khai báo bằng null mà sử dụng, sẽ có exception null pointer
Khi khai báo String s = "quan"; String g = "quan", if (s == g) => true, String h = "qua" + "n", if (h == g) => true NHUNG  string ff = h + "n", if (ff==s) => false

--------- Kế thừa và thứ tự thực thi bên trong constructor SIC
/*
* Khi 1 class khai báo, trong constructor của nó các thành phần sẽ chạy theo thứ tự SIC: super(), instance initializer, phần còn lại của constructor.
* ở ví dụ dưới, sẽ được thực thi như sau:
* 1. JVM thấy A có constructor no-arg nhưng chưa gọi supẻr() ở trong nên Jvm tự thêm super() vào constructor no-arg này.
* 2. Jvm thấy BB không có cons => tự thêm cho BB no-ảrg cons và chèn super() vào bên trong
* 3. trong hàm main, sau khi khởi tạo BB, cons của BB sẽ được chạy theo trình tự SIC (call super(), chạy instance {} của BB, các logic còn lại trong constructor của BB)
* ---- thực thi khởi tạo A bên trong Cons của A:
* lệnh gọi super() sẽ được hạy đầu tiên => no-arg cons của A sẽ được chạy trước. Tại đây, gặp lệnh super() => gọi tới no-arg cons của class Object, khởi tạo xong instance Object, sau đó sẽ khởi tạo các biến/var bên trong class Object => complete class Object
* +++++++tiếp theo sẽ đi khởi tạo giá trị các var trong A, lúc này là I, non-final => định giá trị tại runtime là 10,
* +++++++Tiếp theo các thứ còn lại trong no-arg cons của A, lúc này là func print(). Phương thức này được kế thừa bởi BB vì BB cũng có print() và có cùng signature nên phải kế thừa của A, nếu khai báo print trong BB có signature khác print() trong A, thì vẫn ok, sẽ là overloading không phải overriding
* Bởi vì khi gọi method thì sẽ là gọi method của instance nên print() sẽ được gọi của BB đã override. Khi chạy print có sd var I của BB, nhưng lúc này I chưa được khởi tạo giá trị(evaluate at runtime, non-final) nên có giá trì là 0. vì đây mới đang trong bước khởi tạo A, chưa chạy đến bước var initialization của BB
*  => print() của B sẽ in ra 0. Sau đó chạy tới func aFunc(), là phương thức k đc kế thừa nên sẽ gọi phương thức aFunc của chính nó, in ra afunc, Lúc này đã chạy xong  hàm super() trong cons của BB
*
*
*  ---- Khởi tại gía trị các biến trong BB (var initialization BB) sau khi chạy super()
 *   ++ Đầu tiên là gán giá trị cho I = 4, vì nó là runtime var nên bây giờ mới đướj gán giá trị, nếu khai báo là final thì JVM lúc compile đã định dẵn giá trị rồi
 *   ++ Tiếp theo là chạy lệnh a.print(), phương thức này đã được kế thừa bởi BB, nên sẽ là instance method => chạy bằng print() của BB., có sử dụng I đã được khởi tạo giá trị bước trên: 4
 *   ++ tiếp theo là chạy lệnh in ra a.I,   cả A và BB kế thùa A đều có biến này và đã có giá trị, Nhưng biến thì luôn là reference variable nên sẽ truy cập và sử dụng biến của A => in ra 10
 *
 * Như vậy sau toàn bộ qúa trình hàm main sẽ in ra: 0 aFunc 4 10
* */


class A {
    int i = 10;
    public A() {
        print();
        aFunc();
    }

    public void print(){
        System.out.print("A ");

    }

    public void aFunc() {
        System.out.println("Afunc");
    }
}
public class BB extends A{
    int i =4;
    public static void main(String[] args) {
        A a = new BB();
        a.print(); // instance method
        System.out.println(a.i);  // reference variable
    }

    public void print() {
        System.out.print(i + " ");
    }
}

--------------- super is the closest father, not grandFather
class A {
    int i = 1;
}
class B extends A{
    int i =10;
}
class C extends B {
    public void show() {
        System.out.println(super.i);   //  I of B
    }
}


------------------- Static var, static block
/*
* Nếu A kế thùa B, B có biến static, A có thể sử dụng biến này trữ tiếp thông qua tên của A: A.staticVarName, hoặc sử
* dụng thông qua instance của A,   a.staticVarName
* */
public class Bai8 {
    public static void main(String[] args) {
//        Sub sub = new Sub();
        System.out.println(Sub.ID);  // via reference ok
//        System.out.println(sub.ID);  // via instance ok
    }
}
class Super {
    static { System.out.print("In Qbank");};
    {
        System.out.println("Instance block");
    }
    static String ID = " ID"; }   // nếu như khai báo final, Giá trị này sẽ được gán ở lúc Compile time và Jmv biết nó sẽ không bị thay đổi
   // Cho nên ở hàm main khi truy cập vào ID này, JVM biết giá trị nó rồi
// sẽ không dẫn đến sự Load của class Super trong bộ nhớ => block static sẽ không được chạy
   // Nhưng nếu var ID này không để final, thì ở hàm main lúc gọi đến field static này, thì nó mới được gán giá trị  = "ID"
// => Class Super sẽ được load vào bộ nhớ => block static sẽ được chạy vào lúc này
    /* result:
    * Class Super sẽ được JVM load vào bộ nhớ (đồng thời chạy các static block) khi xảy ra bất kỳ điều gì sau đây:
    *  1.Class được khởi tạo với từ khóa new
    *  2. Bất kỳ Phương thức static của class được gọi lần đầu
    *  3. Bất kỳ biến static nào được gán giá trị lần đầu => biến đó không phải final
    *  4. bất kỳ biến static nào được GỌI lần đầu và biến đó không phải final (non-final thì lúc này gọi JVM mới load giá trị => load class, còn nếu biến static này là final thì JVM biết rõ giá trị nó ròi, có được gọi thì class cũng không được loadd)
    *  5. bất kỳ biến static nào điuọc gọi lần đầu  thông qua class/interface con
    *  6. bất kỳ method thường/static nào được gọi thông qua method reflection của  class Class hoặc package java.lang.reflect
    * */

class Sub extends Super{
    static final int t = 10;
    static { System.out.print("In Sub");  // AAA   static block chỉ được thực thi khi mà 1 trong các sự kiện bên trên xuất hiện }
        {
            System.out.println("Super instance block");
            // khối instance block chỉ được thực thi khi class được khai báo với keywỏrd NEWnhớ
            // , còn khối static sẽ được thực thi khi mà class được load vào trong bộ
        }
}

--------------Kế thừa 3 thế hệ, cháu có thể sử dụng, thay đổi giá trị biến của ông
class Gran {
    protected int i;
    static int s = 10;
}

class Fath extends Gran {
    public int g;
}

class Nep extends Fath {
   public void NepFunc() {
       i  =10;  // ok
       s = 100;  // ok
   }
}

-------------------------  boolean grouping
 boolean a = false;
        boolean b = false;
        boolean c = true;
        if (a && b || c) System.out.println("bo1: " + "OK");  // gom nhom a vs B, and c tach rieng

        boolean d = true;
        if (a && b && d || c) System.out.println("bo2: " + "OK"); //  gom nhom a b, d , C tach rieng

        if (a || c && b) System.out.println("bo3 :" +  "OK");  // gom nhom c, b va nhom a rieng.

        if (a && b || c && d) System.out.println("bo4 :" +  "OK");  // gom nhom a,b va nhom 2: c , d

===================== cast
public class Bai8 {
    public static void main(String[] args) {
        B b = new B();
        System.out.println(b.i);  // 20
        System.out.println(((A)b).i);  // 10
    }
}
class A {
    final int i = 10;
}
class B extends A {
    int i = 20;
}

----------------- getClass => getClass instance
AA a = new BB();
        System.out.println(a.getClass());  // BB

----------------- Overloading
public class Bai4 {
    public Integer get(Integer  s) {return 1;}
    public Object get(Object  s) {return 1;} //  called
    public Long get(Long  s) {return 1L;}
    public static void main(String[] args) {
        System.out.println(new Bai4().get("quan"));
        System.out.println(new Bai4().get(new Bai4()));
    }
}


----------------- IF
int g = 4;
if (g-->4){   // if (10-->4)  => invalid because 10 must be var like G

}

----------------- CHahcnge static var => not possible
public class TestClass{
  static int someInt = 10;
  public static void changeIt(int a){
    a = 20;
  }
  public static void main(String[] args){
    changeIt(someInt);
    System.out.println(someInt);
  }
}


------------------  Để ý câu hỏi: làm sa0 để đỏi data của biến d hiện tại, chứ k phải gán cho 1 đối tượng mới,
thì data của biến d ban đầu vẫn giữ nguyên giá tị ban đầu nhưng k được sd nữa
public class TestClass {
    public static void main(String[] args) throws Exception {
        Data d = new Data(1, 1);
        //add code here
    }
}
Which of the following options when applied individually will change the Data object currently referred to by the variable d to contain 2, 2 as values for its data fields?
